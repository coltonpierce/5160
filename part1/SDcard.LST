C51 COMPILER V9.54   SDCARD                                                                10/13/2015 20:43:39 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SDCARD
OBJECT MODULE PLACED IN SDcard.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE SDcard.c OPTIMIZE(8,SPEED) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "main.h"
   2          #include "port.h"
   3          #include "SDcard.h"
   4          #include "spi.h"
   5          
   6          uint8_t SDcard_init()
   7          {
   8   1        uint8_t return_value[5];
   9   1        uint8_t error_flag, index;
  10   1        
  11   1        
  12   1        //Buffer ?
  13   1        ncs = 1;
  14   1        for(index = 0; index < 10; index++)
  15   1        {
  16   2          SPI_transfer(0xFF, return_value);
  17   2        }
  18   1        
  19   1        
  20   1        // Send CMD0 //
  21   1        
  22   1        error_flag = trans_CMD0(return_value);
  23   1        
  24   1        
  25   1        // Send CMD8 //
  26   1        if(error_flag == NO_ERRORS)
  27   1        {
  28   2          error_flag = trans_CMD8(return_value);
  29   2        }
  30   1        
  31   1        // Send CMD58 //
  32   1        if(error_flag == NO_ERRORS)
  33   1        {
  34   2          error_flag = trans_CMD58(return_value);
  35   2          if(return_value[0] == 0x01)
  36   2          {
  37   3            error_flag = WRONG_RESPONCE;
  38   3          }
  39   2        }
  40   1        
  41   1        // Send ACMD41 //
  42   1        if(error_flag == NO_ERRORS)
  43   1        {
  44   2          error_flag = trans_ACMD41(return_value);
  45   2        }
  46   1        
  47   1        // Send CMD58 //
  48   1        if(error_flag == NO_ERRORS)
  49   1        {
  50   2          error_flag = trans_CMD58(return_value);
  51   2          if(return_value[1] & 0xC0) //bit 31 and 30 are set
  52   2          {
  53   3            //High Capacity
  54   3          }
  55   2          else if(return_value[1] & 0x80) // only bit 31 is set
C51 COMPILER V9.54   SDCARD                                                                10/13/2015 20:43:39 PAGE 2   

  56   2          {
  57   3            //Standard Capacity
  58   3            error_flag = WRONG_SDCARD;
  59   3          }
  60   2          else
  61   2          {
  62   3            error_flag = WRONG_RESPONCE;
  63   3          }
  64   2        }
  65   1        
  66   1        if(error_flag != NO_ERRORS) // LED4 is the error light and this should also be redundent.
  67   1        {
  68   2          LED4 = 0;
  69   2        }
  70   1        ncs = 1; // should not be needed but just in case
  71   1        
  72   1        return error_flag; 
  73   1      }
  74          
  75          
  76          
  77          
  78          
  79          
  80          
  81          
  82          
  83          
  84          
  85          uint8_t trans_CMD0(uint8_t *return_value)
  86          {
  87   1        uint8_t error_flag;
  88   1      
  89   1        // Send CMD0
  90   1        ncs = 0;
  91   1        error_flag = send_command(0, 0);
  92   1        if(error_flag == NO_ERRORS)
  93   1        {
  94   2          error_flag = get_response(1, return_value);
  95   2        }
  96   1        if(error_flag == NO_ERRORS)
  97   1        {
  98   2          if(return_value[0] != 0x01)
  99   2          {
 100   3            error_flag = WRONG_RESPONCE;
 101   3          }
 102   2        }
 103   1        ncs = 1;
 104   1        
 105   1        return error_flag;
 106   1      }
 107          
 108          
 109          
 110          
 111          
 112          uint8_t trans_CMD8(uint8_t *return_value)
 113          {
 114   1        uint8_t error_flag;
 115   1        // Send CMD8
 116   1        ncs = 0;
 117   1        error_flag = send_command(8, 0x000001AA);
C51 COMPILER V9.54   SDCARD                                                                10/13/2015 20:43:39 PAGE 3   

 118   1        if(error_flag == NO_ERRORS)
 119   1        {
 120   2          error_flag = get_response(5, return_value);
 121   2        }
 122   1        if(return_value[0] == 0x05)
 123   1          error_flag = WRONG_RESPONCE;
 124   1        else if(return_value[0] != 0x01)
 125   1          error_flag = FAIL_SDINIT;
 126   1        ncs = 1;
 127   1        return error_flag;
 128   1      }
 129          
 130          
 131          
 132          
 133          
 134          uint8_t trans_CMD58(uint8_t *return_value)
 135          {
 136   1        uint8_t error_flag;
 137   1        // SEND CMD58
 138   1        ncs = 0;
 139   1        error_flag = send_command(58, 0);
 140   1        if(error_flag == NO_ERRORS)
 141   1        {
 142   2          error_flag = get_response(5, return_value);
 143   2        }
 144   1      //  voltage_range = return_value[2];
 145   1        return error_flag;
 146   1      }
 147          
 148          
 149          
 150          
 151          uint8_t trans_ACMD41(uint8_t *return_value)
 152          {
 153   1        uint8_t error_flag, timeout;
 154   1        uint32_t ACMD41_argum = 0x40000000;
 155   1      
 156   1        
 157   1        // Send ACMD41
 158   1        
 159   1        ncs = 0;
 160   1        error_flag = send_command(55, 0);
 161   1        
 162   1        if(error_flag == NO_ERRORS)
 163   1        {
 164   2          timeout = 0;
 165   2          do
 166   2          {
 167   3            error_flag = get_response(1, return_value);
 168   3            timeout++;
 169   3          }while(!(error_flag == 0x01 || error_flag == 0x00) && timeout != 0);
 170   2          if(timeout == 0)
 171   2            error_flag = TIMEOUT_ERROR;     
 172   2        }
 173   1        timeout = 0;
 174   1        if(error_flag == NO_ERRORS)
 175   1        {
 176   2          do
 177   2          {
 178   3            error_flag = send_command(41, ACMD41_argum);
 179   3            if(error_flag == NO_ERRORS)
C51 COMPILER V9.54   SDCARD                                                                10/13/2015 20:43:39 PAGE 4   

 180   3            {
 181   4              error_flag = get_response(1, return_value);
 182   4            }
 183   3            timeout++;
 184   3          }while(return_value[0] != 0x00 && timeout != 0 && error_flag == NO_ERRORS);
 185   2          if(timeout == 0)
 186   2          {
 187   3            error_flag = TIMEOUT_ERROR;
 188   3          }
 189   2        }
 190   1        ncs = 1;
 191   1        
 192   1        return error_flag;
 193   1      }
 194          
 195          
 196          
 197          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    401    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      23
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
