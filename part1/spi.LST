C51 COMPILER V9.53.0.0   SPI                                                               10/14/2015 17:55:51 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN spi.OBJ
COMPILER INVOKED BY: \\minerfiles.mst.edu\dfs\users\mrwpp5\Desktop\C51\BIN\C51.EXE spi.c OPTIMIZE(8,SPEED) DEBUG OBJECTE
                    -XTEND TABS(2)

line level    source

   1          #include "main.h"
   2          #include "port.h"
   3          #include "spi.h"
   4          
   5          
   6          uint8_t SPI_master_init(uint32_t SCLR_FREQ)
   7          {
   8   1        uint8_t divider, return_val;
   9   1        return_val = NO_ERRORS;
  10   1        divider = (uint8_t)(((OSC_FREQ/OSC_PER_INST)*6)/SCLR_FREQ);
  11   1        if(divider <=2)
  12   1          SPCON = 0x70;
  13   1        else if(divider <=4)
  14   1          SPCON = 0x71;
  15   1        else if(divider <=8)
  16   1          SPCON = 0x72;
  17   1        else if(divider <=16)
  18   1          SPCON = 0x73;
  19   1        else if(divider <=32)
  20   1          SPCON = 0xF0; 
  21   1        else if(divider <=64)
  22   1          SPCON = 0xF1; 
  23   1        else if(divider <=128)
  24   1          SPCON = 0xF2; 
  25   1        else // divider > 128
  26   1          return_val = ILLEGAL_CLOCKRATE;
  27   1        return return_val;
  28   1      }
  29          
  30          
  31          
  32          uint8_t SPI_transfer(uint8_t data_input, uint8_t *data_output)
  33          {
  34   1        uint8_t test, timeout;
  35   1        timeout = 0;
  36   1        SPDAT = data_input;
  37   1        do
  38   1        {
  39   2          test = SPSTA;
  40   2          timeout++;
  41   2        }while(((test & 0x80) != 0x80)&&(timeout!=0));
  42   1        if(timeout != 0)
  43   1        {
  44   2          *data_output = SPDAT;
  45   2          timeout = (test & 0x70);
  46   2        }
  47   1        else
  48   1        {
  49   2          timeout = TIMEOUT_ERROR;
  50   2        }
  51   1        return timeout;
  52   1      }
  53          
  54          
C51 COMPILER V9.53.0.0   SPI                                                               10/14/2015 17:55:51 PAGE 2   

  55          
  56          
  57          uint8_t send_command(uint8_t cmd, uint32_t argum)
  58          {
  59   1        uint8_t error_flag, send_val, return_val, index;
  60   1        if(cmd < 64)
  61   1        {
  62   2          send_val = 0x40 | cmd;
  63   2          error_flag = SPI_transfer(send_val, &return_val);
  64   2          index = 24;
  65   2          while((error_flag == NO_ERRORS)&(index<25))
  66   2          {
  67   3            send_val = (uint8_t)(argum >> index);
  68   3            error_flag = SPI_transfer(send_val, &return_val);
  69   3            index -= 8;
  70   3          }
  71   2          if(cmd == 0)
  72   2            send_val = 0x95;
  73   2          else if(cmd == 8)
  74   2            send_val = 0x87;
  75   2          else
  76   2            send_val = 0x01;
  77   2          if(error_flag == NO_ERRORS)
  78   2            error_flag = SPI_transfer(send_val, &return_val);
  79   2          if(error_flag == NO_ERRORS)
  80   2            error_flag = SPI_ERROR;
  81   2        }
  82   1        else
  83   1          error_flag = ILLEGAL_COMMAND;
  84   1        return error_flag;
  85   1      }
  86          
  87          
  88          
  89          uint8_t get_response(uint8_t num_bytes, uint8_t *array_out)
  90          {
  91   1        uint8_t timeout, error_flag, recieve_value;
  92   1        uint8_t index;
  93   1        timeout = 0;
  94   1        error_flag = NO_ERRORS;
  95   1        do
  96   1        {
  97   2          error_flag = SPI_transfer(0xFF, &recieve_value);
  98   2          timeout++;
  99   2        }while((timeout!=0)&&(error_flag == NO_ERRORS)&&(recieve_value == 0xFF));
 100   1        *array_out = recieve_value;
 101   1        if(timeout == 0)
 102   1          error_flag = TIMEOUT_ERROR;
 103   1        else if(error_flag != NO_ERRORS)
 104   1          error_flag = SPI_ERROR;
 105   1        else if((recieve_value != 0x01)&&(recieve_value != 0x00))
 106   1          error_flag = SPI_ERROR;
 107   1        else if(num_bytes > 1)
 108   1        {
 109   2          for(index = 1; index < num_bytes; index++)
 110   2          {
 111   3            SPI_transfer(0xFF, &recieve_value);
 112   3            array_out[index] = recieve_value;
 113   3          }
 114   2        }
 115   1        if(error_flag == NO_ERRORS)
 116   1          error_flag = SPI_transfer(0xFF, &recieve_value);
C51 COMPILER V9.53.0.0   SPI                                                               10/14/2015 17:55:51 PAGE 3   

 117   1        return error_flag;
 118   1      }
 119          
 120          
 121          uint8_t get_response_no_end(uint16_t num_bytes, uint8_t *array_out)
 122          {
 123   1        uint8_t timeout, error_flag, recieve_value;
 124   1        uint16_t index;
 125   1        timeout = 0;
 126   1        error_flag = NO_ERRORS;
 127   1        do
 128   1        {
 129   2          error_flag = SPI_transfer(0xFF, &recieve_value);
 130   2          timeout++;
 131   2        }while((timeout!=0)&&(error_flag == NO_ERRORS)&&(recieve_value == 0xFF));
 132   1        *array_out = recieve_value;
 133   1        if(timeout == 0)
 134   1          error_flag = TIMEOUT_ERROR;
 135   1        else if(error_flag != NO_ERRORS)
 136   1          error_flag = SPI_ERROR;
 137   1        else if((recieve_value != 0x01)&&(recieve_value != 0x00))
 138   1          error_flag = SPI_ERROR;
 139   1        else if(num_bytes > 1)
 140   1        {
 141   2          for(index = 1; index < num_bytes; index++)
 142   2          {
 143   3            SPI_transfer(0xFF, &recieve_value);
 144   3            array_out[index] = recieve_value;
 145   3          }
 146   2        }
 147   1        return error_flag;
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    537    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
